{"version":3,"sources":["../../src/component/AlphabetGrid.js"],"names":["Ext","define","extend","requires","alias","availableLettersStore","store","model","sorters","property","proxy","columns","text","dataIndex","flex","selType","getContextActions","itemId","handler","removeSelection","scope","initComponent","callParent","initStores","initToolbar","Alphabet","console","warn","on","add","_","records","removeFromAvailableLetters","record","letter","get","found","find","removeAt","forEach","remove","toolbar","addDocked","xtype","dock","items","displayField","queryMode","vtype","allowBlank","maxLength","validateOnBlur","editable","autoSelect","disabled","width","input","queryById","getValue","isValid","addSorted","Letter","select","first","concat","menu","Menu","__","___","____","event","stopEvent","showAt","xy","updateAddDisability","disable","count","setDisabled","getSelectionModel","selection","length","confirm","view","getSelection","Msg","ifPressed","suspendEvent","resumeEvent","setData","loadData"],"mappings":"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","file":"AlphabetGrid.js","sourcesContent":["/** */\nExt.define('component.AlphabetGrid', {\n    extend: 'Ext.grid.Panel',\n    requires: ['store.Alphabet'],\n\n    alias: 'widget.ALPHABET-GRID',\n\n    /** @cfg {store.Alphabet} */\n    availableLettersStore: null,\n\n    store: {\n        model: 'model.Letter',\n        sorters: [{property: 'letter'}],\n        proxy: 'memory',\n    },\n    columns: [\n        {text: 'English letter', dataIndex: 'letter', flex: 1},\n    ],\n    selType: 'checkboxmodel',\n\n    getContextActions(){\n        return [\n            {\n                itemId: 'del',\n                text: 'Delete',\n                handler: this.removeSelection, scope: this\n            },\n        ]\n    },\n\n    initComponent(){\n        this.callParent()\n        this.initStores()\n        this.initToolbar()\n    },\n\n    initStores(){\n        if( ! this.availableLettersStore ){\n            this.availableLettersStore = new store.Alphabet\n            console.warn(\"availableLettersStore not set at initComponent\")\n        }\n        this.store.on({\n            add:(_, records ) => {\n                const removeFromAvailableLetters =( record )=> {\n                    const letter = record.get('letter')\n                    const found  = this.availableLettersStore.find('letter', letter)\n                    if( found >= 0 ) this.availableLettersStore.removeAt( found )\n                }\n                records.forEach( removeFromAvailableLetters )\n            },\n            remove:(_, record ) => this.availableLettersStore.add( record )\n        })\n    },\n\n    initToolbar(){\n        const toolbar = this.addDocked({\n            xtype: 'toolbar',\n            dock: 'bottom',\n            items: [\n                {xtype: 'combo',\n                    itemId: 'input',\n                    store: this.availableLettersStore,\n                        displayField: 'letter',\n                        queryMode: 'local',\n                    vtype: 'alpha',\n                        allowBlank: false,\n                        maxLength: 1,\n                        validateOnBlur: false,\n                    editable: false,\n                    autoSelect: true,\n                    disabled: true,\n                    width: 40,\n                },\n                {\n                    itemId: 'add',\n                    text: 'Add',\n                    disabled: true,\n                    handler:() => {\n                        const input = this.queryById('input')\n                        const letter = input.getValue()\n                        if( input.isValid() ){\n                            this.store.addSorted( new model.Letter({letter}) )\n                            input.select( input.store.first() )\n                        }\n                    }\n                },\n            ].concat( this.getContextActions() )\n        })[0]\n\n        const menu = new Ext.menu.Menu({\n            items: this.getContextActions()\n        })\n        this.on('itemcontextmenu', (_, __, ___, ____, event) => {\n             event.stopEvent()\n             menu.showAt(event.xy)\n        })\n\n        this.availableLettersStore.on({\n            add: updateAddDisability,\n            remove: updateAddDisability,\n        })\n        function updateAddDisability(){\n            const disable = this.count()==0\n            toolbar.queryById('input').setDisabled( disable )\n            toolbar.queryById('add').setDisabled( disable )\n        }\n\n        this.getSelectionModel().on('selectionchange', (_, selection) =>\n            toolbar.queryById('del').setDisabled( selection.length == 0 )\n        )\n        toolbar.queryById('del').disable()\n\n    },\n\n    /** */\n    removeSelection(confirm = true){\n        const selection = this.view.getSelectionModel().getSelection()\n        if( selection.length ){\n            const remove =()=> this.store.remove( selection )\n            if( confirm ){\n                Ext.Msg.confirm(\n                    'Delete letter(s)',\n                    'Do you really want to delete ' + selection.length + ' selected letter(s)?',\n                    ifPressed => ifPressed=='yes' && remove()\n                )\n            }else{\n                this.store.suspendEvent('remove')\n                remove()\n                this.store.resumeEvent('remove')\n            }\n        }\n    },\n\n    /** @param {model.Letter[]} records */\n    setData( records ){\n        this.store.loadData( records )\n    },\n})\n"]}