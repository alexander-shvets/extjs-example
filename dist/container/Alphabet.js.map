{"version":3,"sources":["../../src/container/Alphabet.js"],"names":["Ext","define","extend","requires","alias","treeSize","layout","initComponent","availableLetters","store","Alphabet","dragNDropConfig","tree","plugins","ptype","dragGroup","dropGroup","dragText","sortOnDrop","listeners","drop","grid","removeSelection","_","data","sort","records","map","record","remove","items","xtype","itemId","region","width","split","viewConfig","availableLettersStore","callParent","queryById","popAll","setData","slice"],"mappings":"AAAA;;;;AAIAA,IAAIC,MAAJ,CAAW,oBAAX,EAAiC;AAC7BC,YAAQ,wBADqB;AAE7BC,cAAU,CACN,gBADM,EAEN,wBAFM,EAGN,wBAHM,CAFmB;;AAQ7BC,WAAO,iBARsB;;AAU7B;AACAC,cAAU,EAXmB;;AAa7BC,YAAQ,QAbqB;;AAe7BC,iBAf6B,2BAed;AACX,YAAMC,mBAAmB,IAAIC,MAAMC,QAAV,EAAzB;;AAEA,YAAMC,kBAAkB;AACpBC,kBAAM;AACFC,yBAAS;AACLC,2BAAO,kBADF;AAELC,+BAAW,eAFN;AAGLC,+BAAW,eAHN;AAILC,8BAAU,0BAJL;AAKLC,gCAAY;AALP,iBADP;AAQFC,2BAAW;AACPC,wBADO,kBACD;AAAEC,6BAAKC,eAAL,CAAqB,KAArB;AAA6B;AAD9B;AART,aADc;AAapBD,kBAAM;AACFR,yBAAS;AACLC,2BAAO,kBADF;AAELC,+BAAW,eAFN;AAGLC,+BAAW,eAHN;AAILC,8BAAU;AAJL,iBADP;AAOFE,2BAAW;AACPC,wBADO,gBACFG,CADE,EACCC,IADD,EACM;AACT,6BAAKf,KAAL,CAAWgB,IAAX;AACA;AACAD,6BAAKE,OAAL,CAAaC,GAAb,CAAkB;AAAA,mCAAUC,OAAOC,MAAP,EAAV;AAAA,yBAAlB;AACH;AALM;AAPT;AAbc,SAAxB;;AA8BA,aAAKC,KAAL,GAAa,CACT,EAACC,OAAO,eAAR;AACIC,oBAAQ,MADZ;AAEIC,oBAAQ,MAFZ;AAGIC,mBAAO,KAHX;AAIIC,mBAAO,IAJX;AAKIC,wBAAYzB,gBAAgBC;AALhC,SADS,EAQT,EAACmB,OAAO,eAAR;AACIC,oBAAQ,MADZ;AAEIC,oBAAQ,QAFZ;AAGII,mCAAuB7B,gBAH3B;AAII4B,wBAAYzB,gBAAgBU;AAJhC,SARS,CAAb;;AAgBA,aAAKiB,UAAL;;AAEA,YAAMjB,OAAO,KAAKkB,SAAL,CAAe,MAAf,CAAb;AACA,YAAM3B,OAAO,KAAK2B,SAAL,CAAe,MAAf,CAAb;AACA,YAAMb,UAAUlB,iBAAiBgC,MAAjB,EAAhB;;AAEA5B,aAAK6B,OAAL,CAAcf,QAAQgB,KAAR,CAAc,CAAd,EAAiB,KAAKrC,QAAtB,CAAd;AACAgB,aAAKoB,OAAL,CAAcf,QAAQgB,KAAR,CAAe,KAAKrC,QAApB,CAAd;AACH;AAxE4B,CAAjC","file":"Alphabet.js","sourcesContent":["/**\n * Application container.\n * Implements [container component pattern](http://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0#.9suil41s8).\n */\nExt.define('container.Alphabet', {\n    extend: 'Ext.container.Viewport',\n    requires: [\n        'store.Alphabet',\n        'component.AlphabetTree',\n        'component.AlphabetGrid',\n    ],\n\n    alias: 'widget.ALPHABET',\n\n    /** @cfg number of tree items (1 - 26) */\n    treeSize: 10,\n\n    layout: 'border',\n\n    initComponent(){\n        const availableLetters = new store.Alphabet\n\n        const dragNDropConfig = {\n            tree: {\n                plugins: {\n                    ptype: 'treeviewdragdrop',\n                    dragGroup: 'ab-tree-items',\n                    dropGroup: 'ab-grid-items',\n                    dragText: 'Move to the Grid &rBarr;',\n                    sortOnDrop: true,\n                },\n                listeners: {\n                    drop(){ grid.removeSelection(false) }\n                },\n            },\n            grid: {\n                plugins: {\n                    ptype: 'gridviewdragdrop',\n                    dragGroup: 'ab-grid-items',\n                    dropGroup: 'ab-tree-items',\n                    dragText: 'Move to the Tree &lBarr;',\n                },\n                listeners: {\n                    drop(_, data){\n                        this.store.sort()\n                        //remove from tree store:\n                        data.records.map( record => record.remove() )\n                    }\n                },\n            },\n        }\n\n        this.items = [\n            {xtype: 'ALPHABET-TREE',\n                itemId: 'tree',\n                region: 'west',\n                width: '35%',\n                split: true,\n                viewConfig: dragNDropConfig.tree,\n            },\n            {xtype: 'ALPHABET-GRID',\n                itemId: 'grid',\n                region: 'center',\n                availableLettersStore: availableLetters,\n                viewConfig: dragNDropConfig.grid,\n            },\n        ]\n\n        this.callParent()\n\n        const grid = this.queryById('grid')\n        const tree = this.queryById('tree')\n        const records = availableLetters.popAll()\n\n        tree.setData( records.slice(0, this.treeSize ) )\n        grid.setData( records.slice( this.treeSize ) )\n    },\n})\n"]}